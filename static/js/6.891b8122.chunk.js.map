{"version":3,"sources":["views/LoginView.js"],"names":["styles","container","marginLeft","marginRight","width","h1","paddingLeft","error","textAlign","LoginView","dispatch","useDispatch","errorAuth","useSelector","authSelectors","getErrorAuth","style","name","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","credentials","email","password","authOperations","logIn","autoComplete","Item","label","rules","required","message","Password","offset","type","htmlType","description","showIcon"],"mappings":"gJAAA,sHAOMA,EAAS,CACbC,UAAW,CACTC,WAAY,OACZC,YAAa,OACbC,MAAO,KAETC,GAAI,CACFC,YAAa,SAEfC,MAAO,CACLC,UAAW,OACXF,YAAa,UAkBF,SAASG,IACtB,IAAMC,EAAWC,cAeXC,EAAYC,YAAYC,IAAcC,cAoB5C,OACE,sBAAKC,MAAOhB,EAAOC,UAAnB,UACE,oBAAIe,MAAOhB,EAAOK,GAAlB,wBACA,8BACE,eAAC,IAAD,CACEY,KAAK,QACLC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAERE,cAAe,CACbC,UAAU,GAEZC,SAjCS,SAAAC,GAGf,IAAMC,EAAc,CAClBC,MAAOF,EAAOE,MACdC,SAAUH,EAAOG,UAEnBjB,EAASkB,IAAeC,MAAMJ,KA2BxBK,aAAa,MAZf,UAcE,cAAC,IAAKC,KAAN,CACEC,MAAM,QACNf,KAAK,QACLgB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,6BANf,SAUE,cAAC,IAAD,MAGF,cAAC,IAAKJ,KAAN,CACEC,MAAM,WACNf,KAAK,WACLgB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,gCANf,SAUE,cAAC,IAAMC,SAAP,MAGF,cAAC,IAAKL,KAAN,CACEX,WAAY,CACViB,OAAQ,EACRlB,KAAM,IAHV,SAME,cAAC,IAAD,CAAQmB,KAAK,UAAUC,SAAS,SAAhC,0BAML3B,GACC,sBAAKI,MAAOhB,EAAOO,MAAnB,UACE,cAAC,IAAD,CACE4B,QAAQ,QACRK,YAAW,0DAAqD5B,GAChE0B,KAAK,QACLG,UAAQ,IACP","file":"static/js/6.891b8122.chunk.js","sourcesContent":["//import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authOperations, authSelectors } from '../redux/auth';\n\nimport { Form, Input, Button, Alert } from 'antd';\nimport 'antd/dist/antd.css';\n\nconst styles = {\n  container: {\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    width: 500,\n  },\n  h1: {\n    paddingLeft: '150px',\n  },\n  error: {\n    textAlign: 'left',\n    paddingLeft: '150px',\n  },\n};\n\n// const styles = {\n//   form: {\n//     marginLeft: 'auto',\n//     marginRight: 'auto',\n\n//     width: 320,\n//   },\n//   label: {\n//     display: 'flex',\n//     flexDirection: 'column',\n//     marginBottom: 15,\n//   },\n// };\n\nexport default function LoginView() {\n  const dispatch = useDispatch();\n  // const [email, setEmail] = useState('');\n  // const [password, setPassword] = useState('');\n\n  // const handleChange = ({ target: { name, value } }) => {\n  //   switch (name) {\n  //     case 'email':\n  //       return setEmail(value);\n  //     case 'password':\n  //       return setPassword(value);\n  //     default:\n  //       return;\n  //   }\n  // };\n\n  const errorAuth = useSelector(authSelectors.getErrorAuth);\n\n  const onFinish = values => {\n    // setEmail(values.email);\n    // setPassword(values.password);\n    const credentials = {\n      email: values.email,\n      password: values.password,\n    };\n    dispatch(authOperations.logIn(credentials));\n  };\n\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n\n  //   dispatch(authOperations.logIn({ email, password }));\n  //   // setEmail('');\n  //   // setPassword('');\n  // };\n\n  return (\n    <div style={styles.container}>\n      <h1 style={styles.h1}>Login page</h1>\n      <div>\n        <Form\n          name=\"basic\"\n          labelCol={{\n            span: 8,\n          }}\n          wrapperCol={{\n            span: 16,\n          }}\n          initialValues={{\n            remember: true,\n          }}\n          onFinish={onFinish}\n          autoComplete=\"off\"\n        >\n          <Form.Item\n            label=\"Email\"\n            name=\"email\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your Email!',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Password\"\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your password!',\n              },\n            ]}\n          >\n            <Input.Password />\n          </Form.Item>\n\n          <Form.Item\n            wrapperCol={{\n              offset: 8,\n              span: 16,\n            }}\n          >\n            <Button type=\"primary\" htmlType=\"submit\">\n              Login\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n      {errorAuth && (\n        <div style={styles.error}>\n          <Alert\n            message=\"Error\"\n            description={`Check for all fields to be filled correctly! \\n ${errorAuth}`}\n            type=\"error\"\n            showIcon\n          />{' '}\n        </div>\n      )}\n    </div>\n  );\n  // return (\n  //     <div style= {styles.container}>\n  //       <h1>Страница логина</h1>\n\n  //       <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\n  //         <label style={styles.label}>\n  //           Почта\n  //           <input\n  //             type=\"email\"\n  //             name=\"email\"\n  //             value={email}\n  //             onChange={handleChange}\n  //           />\n  //         </label>\n\n  //         <label style={styles.label}>\n  //           Пароль\n  //           <input\n  //             type=\"password\"\n  //             name=\"password\"\n  //             value={password}\n  //             onChange={handleChange}\n  //           />\n  //         </label>\n\n  //         <button type=\"submit\">Войти</button>\n  //       </form>\n  //     </div>\n  //   );\n}\n"],"sourceRoot":""}